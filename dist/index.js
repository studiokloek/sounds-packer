import e from"chalk";import t from"fs-extra";import{getAudioDurationInSeconds as o}from"get-audio-duration";import{globby as r}from"globby";import n from"hasha";import s from"log-symbols";import a from"ora";import i from"path";import c from"camelcase";import l from"get-value";import f from"pupa";import p from"set-value";import u from"uppercamelcase";import m from"object.defaults";import g from"sane";import{debounce as d}from"throttle-debounce";const h="export const {assets}LoaderInfo = {\n  assetName : '{assetName}',\n  assets : {assets},\n  numberOfSounds : {numberOfSounds},\n  type: 'sounds'\n};",y="export const {assetName} = {assetData};";function w(e,t){let o=(e=`${e}`).replace(`${t}/`,"").split("/").map((e=>{return/^\d/.test(t=e)&&(t=`s${t}`),t.replaceAll(/(\W)/g,"_").replaceAll(/_{2,}/g,".").replace(/^_/,"").replace(/_$/,"");var t})),r=o.pop();r=r.toUpperCase(),o=o.map((e=>c(e)));let n=t.split("/");return n=n.slice(n.length-(1===n.length?1:2)),n.push("sounds"),n=u(n.join("-")),o.length>0?[n,e=(e=o.join(".")).replace(/(\W^\.)/g,"").replace(/\.{2,}/g,".").replace(/^\./,"").replace(/\.$/,""),r].join("."):[n,r].join(".")}function $(e){const t=[];for(const o of Object.keys(e))Object.prototype.hasOwnProperty.call(e,o)&&t.push([o,e[o]]);t.sort(((e,t)=>{const o=e[0],r=t[0];return o<r?-1:o>r?1:0}));const o={};for(const e of t)o[e[0]]=e[1];return o}async function D(e,o,r,n){const s=l(n,"scriptDirectory",r.scriptDirectory),a=function(e,t){const o=t,r={};for(const t of e||[]){const e={id:t.hash,duration:t.duration,name:t.name};p(r,w(i.join(t.path,t.name),o),e)}return r}(o,e),c=function(e,t){let o="";const r=[];for(const t of Object.keys(e)){const n=$(e[t]);let s=JSON.stringify(n,null,2);s=s.replace(/"([^"()]+)":/g,"$1:"),o=`${o}${f(y,{assetName:t,assetData:s})}\n`,r.push(t)}return o=`${o}${f(h,{assets:r,assetName:t.fileName,numberOfSounds:t.numberOfSounds})}\n`,o}(a,{fileName:e,numberOfSounds:o.length}),u=function(e,t){const o=e.split("/"),r=o.pop();return o.length<2&&o.push(r),e=o.join("/"),`${i.join(t,e)}/assets/sounds-${r}.ts`}(e,s);await t.outputFile(u,c)}const b={},j={};async function v(c,l){let f,p;if(Array.isArray(c)?(f=c[0],p=c[1]):f=c,b[f])return console.log(s.warning,e.yellow("Already packing, starting again afterwards...")),void(j[f]=!0);b[f]=!0;const u=a(`Packing ${f}`).start();try{const e=async function(e,s,a){const c=i.posix.join(s.sourceDirectory,e),l=await r(`${c}/**/*.wav`),f=[];for(const e of l){let t=await n.fromFile(e,{algorithm:"md5"});t=t.slice(0,10);let r=await o(e);r=Math.round(1e4*r)/1e4;const a=e.replace(`${c}/`,""),l={filename:i.basename(a,".wav"),path:a.replace(`${i.basename(a)}`,""),duration:r,hash:t};let p=l.filename;for(const e of s.prefixes)p.startsWith(e)&&(p=p.slice(e.length));l.name=p,f.push(l)}const p=!0!==s.onlyGenerateCode&&(!a||!0!==a.onlyGenerateCode);if(p){const o=await async function(e,o,r){const n=i.join(r.sourceDirectory,e);for(const e of o)try{const o=[];for(const s of r.formats)o.push(t.copy(`${i.join(n,e.path,e.filename)}.${s}`,`${i.join(r.targetDirectory,e.hash)}.${s}`,{overwrite:!1}));await Promise.all(o)}catch(e){return console.log(e),!1}return!0}(e,f,s);if(!o)return!1}return await D(e,f,s,a),!0}(f,l,p);if(!e)return void u.fail(`Error packing ${f}`)}catch(e){return u.fail(`Error packing ${f}`),void console.error(s.warning,e.message)}b[f]=!1,j[f]?(j[f]=!1,u.warn("Needs repacking, something changed while packing..."),await v(c,l)):u.succeed(`Done packing ${f}`)}async function k(e){const o=a(`Reading settings from ${e}...`).start();let r={};try{const o=await t.readJSON(e);r=l(o,"sounds",{}),r=m({},r,{sourceDirectory:"./assets/",scriptDirectory:"./assets/converted/",targetDirectory:"./assets/converted/",watch:!1,watchDelay:500,prefixes:[],formats:["ogg","mp3"],onlyGenerateCode:!1,clearTargetDirectory:!1,directories:[]}),r.prefixes.length>0&&(r.prefixes=function(e){const t=[];for(const r of e){const n=[...r.matchAll(/_/g)].map((e=>e.index));function o(e,r){if(r===n.length)return void t.push(`${e}-`,`${e}_`);const s=n[r],a=e.slice(0,s),i=e.slice(s+1);o(`${a}_${i}`,r+1),o(`${a}-${i}`,r+1)}o(r,0)}return[...new Set(t)]}(r.prefixes)),r.prefixes.sort(((e,t)=>e<t?1:e>t?-1:0))}catch(t){return console.log(t),o.fail(`Could not load settings from ${e}... (does it exist?)`),r}const n=r.directories.length;return n?o.succeed(`Found ${n} directories to process...`):o.fail("Found no directories to process..."),r}async function x(t,o){return new Promise((r=>{let n,a={};if(Array.isArray(t)?(n=t[0],a=t[1]):n=t,!0!==o.watch&&!0!==a.watch||!1===a.watch)return void r();const c=d(o.watchDelay,(()=>{v(t,o)})),l=g(`${i.join(o.sourceDirectory,n)}`,{glob:["**/*.png","**/*.jpg"]});l.on("ready",(()=>{console.log(s.info,e.blue(`Started watching ${n} with a delay of ${o.watchDelay/1e3}s`)),r()})),l.on("change",c),l.on("add",c),l.on("delete",c)}))}async function O(o){const r=await k(o),n=r.directories;delete r.directories,r&&n&&(await async function(o,r){if(console.log(s.info,e.blue("Start packing all items...")),await t.mkdirp(r.targetDirectory),!0===r.clearTargetDirectory){console.log(s.info,e.blue(`Clearing sounds target directory (${r.targetDirectory})...`));const o=await t.readdir(r.targetDirectory);await Promise.all(o.filter((e=>!1===e.includes(".gitignore"))).map((e=>t.remove(i.resolve(r.targetDirectory,e)))))}for(const e of o)await v(e,r);console.log(s.success,e.green("Done packing all items..."))}(n,r),await async function(e,t){for(const o of e)await x(o,t)}(n,r))}function N(e){O(e||"assets.json")}export{N as pack};
